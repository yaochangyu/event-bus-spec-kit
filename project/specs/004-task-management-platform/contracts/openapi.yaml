openapi: 3.0.3
info:
  title: Task Management Platform API
  description: 集中管理平台 API 規格
  version: 1.0.0
  contact:
    name: Development Team
servers:
  - url: https://api.taskmanagement.com/v1
    description: Production server
  - url: https://staging-api.taskmanagement.com/v1
    description: Staging server

tags:
  - name: Authentication
    description: 認證相關操作
  - name: Projects
    description: 專案管理
  - name: Tasks
    description: 任務管理
  - name: Users
    description: 使用者管理
  - name: Notifications
    description: 通知管理

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: 使用者登入
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登入成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 認證失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: 刷新存取權杖
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: 權杖刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  # Project Endpoints
  /projects:
    get:
      tags: [Projects]
      summary: 取得專案列表
      operationId: getProjects
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/ProjectStatus'
      responses:
        '200':
          description: 專案列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'

    post:
      tags: [Projects]
      summary: 建立新專案
      operationId: createProject
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: 專案建立成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: 請求格式錯誤
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /projects/{projectId}:
    get:
      tags: [Projects]
      summary: 取得專案詳細資訊
      operationId: getProject
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 專案詳細資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: 專案不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [Projects]
      summary: 更新專案資訊
      operationId: updateProject
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'

    delete:
      tags: [Projects]
      summary: 刪除專案
      operationId: deleteProject
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 刪除成功
        '403':
          description: 權限不足
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Task Endpoints
  /projects/{projectId}/tasks:
    get:
      tags: [Tasks]
      summary: 取得專案任務列表
      operationId: getProjectTasks
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: assignedTo
          in: query
          schema:
            type: string
            format: uuid
        - name: priority
          in: query
          schema:
            $ref: '#/components/schemas/TaskPriority'
      responses:
        '200':
          description: 任務列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'

    post:
      tags: [Tasks]
      summary: 建立新任務
      operationId: createTask
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: 任務建立成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /tasks/{taskId}:
    get:
      tags: [Tasks]
      summary: 取得任務詳細資訊
      operationId: getTask
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 任務詳細資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

    put:
      tags: [Tasks]
      summary: 更新任務資訊
      operationId: updateTask
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

    delete:
      tags: [Tasks]
      summary: 刪除任務
      operationId: deleteTask
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 刪除成功

  /tasks/{taskId}/status:
    patch:
      tags: [Tasks]
      summary: 更新任務狀態
      operationId: updateTaskStatus
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskStatusRequest'
      responses:
        '200':
          description: 狀態更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /tasks/{taskId}/assign:
    patch:
      tags: [Tasks]
      summary: 指派任務
      operationId: assignTask
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTaskRequest'
      responses:
        '200':
          description: 指派成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  # User Endpoints
  /users/me:
    get:
      tags: [Users]
      summary: 取得當前使用者資訊
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 使用者資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{userId}:
    get:
      tags: [Users]
      summary: 取得使用者資訊
      operationId: getUser
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 使用者資訊
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  # Notification Endpoints
  /notifications:
    get:
      tags: [Notifications]
      summary: 取得通知列表
      operationId: getNotifications
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: isRead
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: 通知列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'

  /notifications/{notificationId}/read:
    patch:
      tags: [Notifications]
      summary: 標記通知為已讀
      operationId: markNotificationAsRead
      security:
        - BearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 標記成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Enums
    ProjectStatus:
      type: string
      enum: [Planning, Active, OnHold, Completed, Cancelled]

    TaskStatus:
      type: string
      enum: [Created, Assigned, InProgress, Review, Completed, OnHold, Cancelled]

    TaskPriority:
      type: string
      enum: [Low, Medium, High, Critical]

    UserRole:
      type: string
      enum: [Member, ProjectManager, Administrator]

    ProjectRole:
      type: string
      enum: [Viewer, Contributor, Manager]

    NotificationType:
      type: string
      enum: [TaskAssigned, TaskStatusChanged, TaskDueSoon, TaskOverdue, ProjectStatusChanged, CommentAdded]

    # Request DTOs
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    CreateProjectRequest:
      type: object
      required:
        - name
        - startDate
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        status:
          $ref: '#/components/schemas/ProjectStatus'
        endDate:
          type: string
          format: date-time

    CreateTaskRequest:
      type: object
      required:
        - title
        - priority
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/TaskPriority'
        assignedTo:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          format: decimal

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        priority:
          $ref: '#/components/schemas/TaskPriority'
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          format: decimal
        actualHours:
          type: number
          format: decimal

    UpdateTaskStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/TaskStatus'
        comment:
          type: string
          maxLength: 500

    AssignTaskRequest:
      type: object
      required:
        - assignedTo
      properties:
        assignedTo:
          type: string
          format: uuid

    # Response DTOs
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        user:
          $ref: '#/components/schemas/UserResponse'

    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/ProjectStatus'
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        taskCount:
          type: integer
        completedTaskCount:
          type: integer

    ProjectListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'
        pagination:
          $ref: '#/components/schemas/PaginationResponse'

    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        projectId:
          type: string
          format: uuid
        projectName:
          type: string
        assignedTo:
          type: string
          format: uuid
        assigneeName:
          type: string
        createdBy:
          type: string
          format: uuid
        creatorName:
          type: string
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          format: decimal
        actualHours:
          type: number
          format: decimal
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time

    TaskListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
        pagination:
          $ref: '#/components/schemas/PaginationResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        profileImageUrl:
          type: string
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    NotificationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/NotificationType'
        title:
          type: string
        content:
          type: string
        relatedEntityId:
          type: string
          format: uuid
        relatedEntityType:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time

    NotificationListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/NotificationResponse'
        pagination:
          $ref: '#/components/schemas/PaginationResponse'
        unreadCount:
          type: integer

    PaginationResponse:
      type: object
      properties:
        page:
          type: integer
        pageSize:
          type: integer
        totalCount:
          type: integer
        totalPages:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time